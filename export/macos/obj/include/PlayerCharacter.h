// Generated by Haxe 4.3.1
#ifndef INCLUDED_PlayerCharacter
#define INCLUDED_PlayerCharacter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(PlayerCharacter)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayerCharacter_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef PlayerCharacter_obj OBJ_;
		PlayerCharacter_obj();

	public:
		enum { _hx_ClassId = 0x59e0c928 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayerCharacter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"PlayerCharacter"); }
		static ::hx::ObjectPtr< PlayerCharacter_obj > __new();
		static ::hx::ObjectPtr< PlayerCharacter_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayerCharacter_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayerCharacter",e8,e3,b9,8d); }

};


#endif /* INCLUDED_PlayerCharacter */ 
